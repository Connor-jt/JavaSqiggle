// WHY DOESN'T THREE.JS WANT ME TO JUST LET GLTF MODELS IMPORT

// we should probably just have single arrays,
// and process them in multiples of 3,
// that would save a lot of room on array references

const unit_mesh_geo = new THREE.BufferGeometry();
const unit_mesh_verts = new Float32Array([
     0.000000,  0.000000, -1.000000,
    -0.000000,  2.011436, -0.731241,
     0.000000,  2.204339,  0.000000,
    -0.108253,  1.224939, -0.211715,
     0.108253,  1.224939, -0.211715,
     0.866025,  0.000000,  0.500000,
     0.633273,  2.011436,  0.365620,
     0.237477,  1.224939,  0.012108,
     0.129224,  1.224939,  0.199608,
    -0.866025,  0.000000,  0.500000,
    -0.633273,  2.011436,  0.365620,
    -0.129224,  1.224939,  0.199608,
    -0.237477,  1.224939,  0.012108,
     0.224121,  1.892714, -0.129396,
    -0.224121,  1.892714, -0.129396,
     0.000000,  1.892714,  0.258792,
    -0.134360,  1.283252, -0.077573,
     0.336561,  0.000000, -0.194314,
    -0.336561,  0.000000, -0.194314,
     0.000000,  0.000000,  0.388627,
     0.134360,  1.283252, -0.077573,
     0.000000,  1.283252,  0.155146
]);
const unit_mesh_indices = [
	// BASE TRIANGLES
     7,  8,  5,
    11, 12,  9,
     5, 17, 19,
    18,  9, 12,
    17, 20,  7,
    19, 21, 11,
     8, 21, 19,
     4, 20, 17,
     3,  0, 18,
    19, 18,  9,
    19, 17, 18,
    17,  0, 18,
     3,  4,  0,
    16, 18, 12,
    16,  3, 18,
     9, 19, 11,
     5,  8, 19,
     5, 17,  7,
     0,  4, 17,
    // HEAD TRIANGLES
     3,  1,  4,
     7,  6,  8,
    11, 10, 12,
     7, 13,  6,
    12, 10, 14,
     8,  6, 15,
     2,  1, 14,
    15,  6,  2,
     2,  6, 13,
    10, 15,  2,
    10,  2, 14,
     1,  2, 13,
     4,  1, 13,
    20,  4, 13,
     1,  3, 14,
    16, 12, 14,
    21, 15, 11,
     7, 20, 13,
     3, 16, 14,
    15, 10, 11,
    21,  8, 15
];

unit_mesh_geo.setIndex(unit_mesh_indices);
unit_mesh_geo.setAttribute('position', new THREE.BufferAttribute(unit_mesh_verts, 3));
//unit_mesh_geo.computeVertexNormals();
unit_mesh_geo.addGroup(0, 57, 0); // base uses first color
unit_mesh_geo.addGroup(57, 63, 1); // head uses second
/*
const verts = [
[ 0.000000,  0.000000, -1.000000],
[-0.000000,  2.011436, -0.731241],
[ 0.000000,  2.204339,  0.000000],
[-0.108253,  1.224939, -0.211715],
[ 0.108253,  1.224939, -0.211715],
[ 0.866025,  0.000000,  0.500000],
[ 0.633273,  2.011436,  0.365620],
[ 0.237477,  1.224939,  0.012108],
[ 0.129224,  1.224939,  0.199608],
[-0.866025,  0.000000,  0.500000],
[-0.633273,  2.011436,  0.365620],
[-0.129224,  1.224939,  0.199608],
[-0.237477,  1.224939,  0.012108],
[ 0.224121,  1.892714, -0.129396],
[-0.224121,  1.892714, -0.129396],
[ 0.000000,  1.892714,  0.258792],
[-0.134360,  1.283252, -0.077573],
[ 0.336561,  0.000000, -0.194314],
[-0.336561,  0.000000, -0.194314],
[ 0.000000,  0.000000,  0.388627],
[ 0.134360,  1.283252, -0.077573],
[ 0.000000,  1.283252,  0.155146]];

const base_triangles = [
[ 8,  9,  6]
[12, 13, 10]
[ 6, 18, 20]
[19, 10, 13]
[18, 21,  8]
[20, 22, 12]
[ 9, 22, 20]
[ 5, 21, 18]
[ 4,  1, 19]
[20, 19, 10]
[20, 18, 19]
[18,  1, 19]
[ 4,  5,  1]
[17, 19, 13]
[17,  4, 19]
[10, 20, 12]
[ 6,  9, 20]
[ 6, 18,  8]
[ 1,  5, 18]];

const head_triangles = [
[ 4,  2,  5]
[ 8,  7,  9]
[12, 11, 13]
[ 8, 14,  7]
[13, 11, 15]
[ 9,  7, 16]
[ 3,  2, 15]
[16,  7,  3]
[ 3,  7, 14]
[11, 16,  3]
[11,  3, 15]
[ 2,  3, 14]
[ 5,  2, 14]
[21,  5, 14]
[ 2,  4, 15]
[17, 13, 15]
[22, 16, 12]
[ 8, 21, 14]
[ 4, 17, 15]
[16, 11, 12]
[22,  9, 16]];


vn -0.0000 -0.5512 -0.8344
vn 0.7283 0.5412 0.4205
vn 0.7226 -0.5512 0.4172
vn -0.7283 0.5412 0.4205
vn -0.7226 -0.5512 0.4172
vn -0.0000 1.0000 -0.0000
vn -0.7844 0.1642 -0.5981
vn 0.7003 0.1733 -0.6925
vn 0.2496 0.1733 0.9527
vn 0.7790 -0.1150 -0.6163
vn -0.7790 -0.1150 -0.6163
vn -0.1442 -0.1150 0.9828
vn -0.7675 0.6199 -0.1635
vn -0.2421 0.6199 0.7464
vn 0.5254 0.6199 -0.5829
vn 0.2421 0.6199 0.7464
vn -0.5254 0.6199 -0.5829
vn 0.7675 0.6199 -0.1635
vn 0.9233 -0.1150 -0.3665
vn 0.9802 -0.1549 -0.1235
vn -0.9233 -0.1150 -0.3665
vn -0.5970 -0.1549 -0.7871
vn -0.2496 0.1733 0.9527
vn 0.9499 0.1733 -0.2602
vn -0.9102 0.1642 -0.3802
vn 0.3832 -0.1549 0.9106
vn 0.5970 -0.1549 -0.7871
vn -0.9802 -0.1549 -0.1235
vn 0.1442 -0.1150 0.9828
vn -0.3832 -0.1549 0.9106
vn -0.0000 0.5412 -0.8409
vn -0.7003 0.1733 -0.6925
vn -0.9499 0.1733 -0.2602
vn 0.1258 0.1642 0.9784
vn -0.1258 0.1642 0.9784
vn 0.7844 0.1642 -0.5981
vn 0.9102 0.1642 -0.3802


0 0.8343959 -0.5511656 0.7282589 
-0.4204608 0.5411579 0.7226079 
-0.417198 -0.5511658 -0.7282589 
-0.4204608 0.541158 -0.7226079 
-0.417198 -0.5511657 0 1.53372e-7 
1 -0.7843772 0.5981441 0.1642439 
0.7002869 0.6924961 0.1733418 
0.2495765 -0.9527142 0.1733417 
0.7790444 0.6163281 -0.1150197 
-0.7790447 0.6163278 -0.1150197 
-0.1442331 -0.9828364 -0.1150197 
-0.767477 0.1635234 0.6198703 
-0.2421232 -0.746416 0.6198706 
0.5253537 0.5828928 0.6198705 
0.2421236 -0.7464159 0.6198706 
-0.5253541 0.5828926 0.6198705 
0.7674769 0.1635236 0.6198705 
0.9232779 0.3665084 -0.1150197 
0.9801933 0.1234508 -0.1548579 
-0.923278 0.3665083 -0.1150197 
-0.5970084 0.7871469 -0.1548579 
-0.2495757 -0.9527144 0.1733418 
0.9498627 0.260218 0.1733416 
-0.9101967 0.3802186 0.1642439 
0 1.32171e-7 1 
0 1.53372e-7 1 
0 0 1 
0.3831858 -0.9105975 -0.1548579 
0.597008 0.7871472 -0.1548579 
-0.9801933 0.1234504 -0.1548579 
0.1442335 -0.9828363 -0.1150198 
-0.3831852 -0.9105977 -0.154858 
0 0.8409212 0.5411579 
-0.7002867 0.6924964 0.1733418 
-0.949863 0.2602174 0.1733417 
0.1258195 -0.9783626 0.1642438 
-0.1258194 -0.9783627 0.1642439 
0.7843772 0.5981442 0.1642439 
0.9101966 0.3802186 0.1642439
*/